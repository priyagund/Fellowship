package com.bridgelabz.services;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;

import com.bridgelabz.model.Address;
import com.bridgelabz.model.ImplPerson;
import com.bridgelabz.model.Person;
import com.bridgelazs.utility.Utility;

public class AddressBookNew implements ImplPerson {
	Person person = new Person();
	Address address = new Address();
	ObjectMapper mapper = new ObjectMapper();
	File addressbookFilename;
	public void addPerson(List<Person> listOfPerson) {

		System.out.println("Enter First name");
		person.setName(Utility.getStr());
		System.out.println("Enter Last Name");
		person.setLastname(Utility.getStr());
		System.out.println("Enter Phone Number");
		person.setPhoneno(Utility.getStr());
		System.out.println("Enter City");
		address.setCity(Utility.getStr());
		System.out.println("Enter State");
		address.setState(Utility.getStr());
		System.out.println("Enter zipCode");
		address.setZip(Utility.getStr());
		person.setAddress(address);

		listOfPerson.add(person);
		System.out.println(listOfPerson.get(0));
		saveAddressBook(listOfPerson,addressbookFilename);

	}

	@Override
	public void editPerson(List<Person> person) {
		System.out.println("Enter person Phone number which details you want to edit");
		String mob = Utility.getStr();
		int personlocation = 0;
		boolean isFound = false;
		for (int i = 0; i < person.size(); i++) {
			String personmob = person.get(i).getPhoneno();
			if (mob.equals(personmob)) {
				isFound = true;
				System.out.println("person found");
				break;
			}
			personlocation++;
		}
		if (!isFound) {
			System.out.println("person not found");
		} else {

			System.out.println("what do you want to edit 1.zip\n 2.name\n 3.city");
			int choice = Utility.getInt();

			switch (choice) {

			case 1: // zip
				String zip = Utility.getStr();
				person.get(personlocation).getAddress().setZip(zip);
				break;
			case 2:// name
				String name = Utility.getStr();
				person.get(personlocation).setName(name);
				break;

			case 3:// city

				String city = Utility.getStr();
				person.get(personlocation).getAddress().setCity(city);
				break;
			}

		}
		//saveAddressBook(listOfPerson,addressbookFilename);		

	}

	@Override
	public void deletePerson(List<Person> person) {
		// TODO Auto-generated method stub

		System.out.println("enter mobile number of person which you want to delete");
		int personloc = 0;
		String mobno = Utility.getStr();
		boolean isFound = false;
		for (int i = 0; i < person.size(); i++) {
			String personmob = person.get(i).getPhoneno();
			if (mobno.equals(personmob)) {
				isFound = true;
				System.out.println("person is found in addressbook");
				person.remove(personloc);
				System.out.println("Person deleted successfully");
				break;
			}
			personloc++;
		}
		if (!isFound)
		{
			System.out.println("person is not found in addressbook");
		}

	}

	@Override
	public void sortByLastName(List<Person> person) {
		// TODO Auto-generated method stub
		for (int i = 0; i < person.size(); i++) {
			for (int j = i + 1; j < person.size(); j++) {
				Person person1 = person.get(i);
				Person person2 = person.get(j);

				if (person1.getLastname().compareTo(person2.getLastname()) > 0) {
					Person temp = person1;
					person.set(i, person2);
					person.set(j, temp);
				}
			}
		}
		System.out.println("AddressBook successfully sorted using LastName");

	}

	@Override
	public void sortByZipCode(List<Person> person) {
		// TODO Auto-generated method stub
		for (int i = 0; i < person.size(); i++) {
			for (int j = i + 1; j < person.size(); j++) {
				Person person1 = person.get(i);
				Person person2 = person.get(j);

				if (person1.getAddress().getZip().compareTo(person2.getAddress().getZip()) > 0) {
					Person temp = person1;
					person.set(i, person2);
					person.set(j, temp);
				}
			}
		}
		System.out.println("AddressBook successfully sorted using ZipCode");

	}

	@Override
	public void createAddressBook() throws JsonGenerationException, JsonMappingException, IOException {
		// TODO Auto-generated method stub
		System.out.println("enter addressbook name");
		String addName = Utility.getStr();

		File jsonFilename = new File("/home/bridgeit/Desktop/priya/Felloship/CorePrograms/files/" + addName + ".json");

		if (!jsonFilename.exists()) {
			System.out.println("New Address Book Open Successfully");
		} else {
			System.out.println("file is already exist");
		}

	}

	@Override
	public void openAddressBook() throws JsonParseException, JsonMappingException, IOException {
		// TODO Auto-generated method stub
//		List<Person> listOfPersons=new ArrayList<Person>(Arrays.asList(mapper.readValue(new File("/home/bridgeit/Desktop/priya/Felloship/CorePrograms/files/AddressBookData.json"), Person[].class)));
//		return listOfPersons;

		File file = new File("/home/bridgeit/Desktop/priya/Felloship/CorePrograms/files/");
		File[] filelist = file.listFiles();
		for (int i = 0; i < filelist.length; i++) {
			if (filelist[i].isFile()) {
				System.out.println(
						(i + 1) + " " + filelist[i].getName().substring(0, filelist[i].getName().lastIndexOf(".")));

			}
		}

		System.out.println("enter addressbook name you want to open");
		String addressbookname = Utility.getStr();
		Boolean isfound = false;
		for (int i = 0; i < filelist.length; i++) {
			if (filelist[i].isFile()) {
				if (filelist[i].getName().substring(0, filelist[i].getName().lastIndexOf("."))
						.equalsIgnoreCase(addressbookname)) {
					File jsonFilename = filelist[i];
					addressbookFilename=jsonFilename;
					isfound = true;
					person = mapper.readValue(filelist[i], Person.class);
				}
			}
		}
	}

	@Override
	public void saveAddressBook(List<Person> listOfPerson,File filename)
			throws JsonParseException, JsonMappingException, IOException {
		// TODO Auto-generated method stub
		System.out.println("in save addressBook with value" + listOfPerson.get(0));

		mapper.writeValue(new File("/home/bridgeit/Desktop/priya/Felloship/CorePrograms/files/AddressBookData.json"),
				listOfPerson);
	}

	@Override
	public void showAllAddressBook(List<Person> listOfPerson) {
		// TODO Auto-generated method stub
		Iterator<Person> itr=listOfPerson.iterator();
		 while (itr.hasNext()) { 
             System.out.println("Person Details : "+ itr.next()); 
             System.out.println("***************************************\n\n");
         } 
	}
	public void creatAddressBook() throws JsonGenerationException, JsonMappingException, IOException {
		Person person = new Person();
		System.out.println("enter addressbook name");
		String addName = Utility.getStr();
		// String absolutePath
		// ="/home/bridgeit/Desktop/priya/Felloship/CorePrograms/files/";
		// System.out.println("Eneter file name");
		// File filenew=new File(absolutePath);
		// System.out.println(filenew.createNewFile());
		// if(filenew.createNewFile())
		// {
		File jsonFilename = new File("/home/bridgeit/Desktop/priya/Felloship/CorePrograms/files/" + addName + ".json");

		if (jsonFilename.createNewFile()) {
			FileWriter wr=new FileWriter(jsonFilename);
			String emptyString="[{}]";
			wr.write(emptyString);
			mapper.writeValue(jsonFilename, person);
			System.out.println("Person:" + person);
		} else
			System.out.println("file is already exist");

		//System.out.println("Address book is created " + addName + ".json");
		// FileWriter wr=new FileWriter(filenew);
		// System.out.println("Address book is created "+addName+".json");
		// wr.write("[]");
//			person = mapper.readValue(jsonFilename, new TypeReference<ArrayList<Person>>() {
//			});

		// }

//		mapper.writeValue(new File("/home/bridgeit/Desktop/priya/Felloship/CorePrograms/files/newFile.json"), person);
//		System.out.println("enter how many person add in addressbook");
	}


}
